#!/bin/bash

# Copyright 2016 - 2017 Bitnami
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

DOCKER_SERVER_VERSION=$(docker version --format '{{.Server.Version}}')
DOCKER_CLIENT_VERSION=$(docker version --format '{{.Client.Version}}')

DOCKERFILE=${DOCKERFILE:-Dockerfile}
SUPPORTED_VARIANTS="dev prod onbuild buildpack"

DOCKER_PROJECT=${DOCKER_PROJECT:-}
QUAY_PROJECT=${QUAY_PROJECT:-}
GCLOUD_PROJECT=${GCLOUD_PROJECT:-}

IMAGE_TAG=${CIRCLE_TAG#che-*}
CHART_IMAGE=${CHART_IMAGE:-$DOCKER_PROJECT/$IMAGE_NAME:$IMAGE_TAG}
CHART_REPO=${CHART_REPO:-}

GIT_AUTHOR_NAME=${GIT_AUTHOR_NAME:-Bitnami Containers}
GIT_AUTHOR_EMAIL=${GIT_AUTHOR_EMAIL:-containers@bitnami.com}

GITHUB_TOKEN=${GITHUB_TOKEN:-$GITHUB_PASSWORD}   # required by hub
export GITHUB_TOKEN

SKIP_CHART_PULL_REQUEST=${SKIP_CHART_PULL_REQUEST:-0}
SKIP_CHART_APP_VERSION_UPDATE=${SKIP_CHART_APP_VERSION_UPDATE:-0}

GOOGLE_CLOUD_SDK_VERSION=162.0.1
HUB_VERSION=2.2.9
HELM_VERSION=2.5.0

# in release mode circle ci does not define CIRCLE_BRANCH, we assume "master" for caching purposes
CIRCLE_BRANCH=${CIRCLE_BRANCH:-master}

log() {
  echo -e "$(date "+%T.%2N") ${@}"
}

info() {
  log "INFO  ==> ${@}"
}

warn() {
  log "WARN  ==> ${@}"
}

error() {
  log "ERROR ==> ${@}"
}

vercmp() {
  if [[ $1 == $2 ]]; then
    echo "0"
  else
    if [[ $( ( echo "$1"; echo "$2" ) | sort -rV | head -n1 ) == $1 ]]; then
      echo "-1"
    else
      echo "1"
    fi
  fi
}

install_google_cloud_sdk() {
  if ! which gcloud >/dev/null ; then
    if ! which python >/dev/null; then
      info "Installing google-cloud-sdk dependencies..."
      if which apt-get >/dev/null; then
        apt-get update
        apt-get install -y python || return 1
      elif which apk >/dev/null; then
        apk add --no-cache python || return 1
      fi
    fi

    info "Downloading google-cloud-sdk-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz..."
    if ! curl -sSLO https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz; then
      error "Could not download google-cloud-sdk..."
      return 1
    fi

    info "Extracting google-cloud-sdk..."
    if ! tar -zxf google-cloud-sdk-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz -C /usr/local/lib/; then
      error "Could not extract google-cloud-sdk-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz..."
      return 1
    fi

    info "Installing google-cloud-sdk..."
    if ! /usr/local/lib/google-cloud-sdk/install.sh -q >/dev/null; then
      error "Could not install google-cloud-sdk..."
      return 1
    fi

    export PATH=/usr/local/lib/google-cloud-sdk/bin:$PATH

    if ! gcloud version; then
      return 1
    fi
  fi
}

install_hub() {
  if ! which hub >/dev/null ; then
    if which apk >/dev/null; then
      echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
      apk add --no-cache hub
    else
      info "Downloading hub-linux-amd64-$HUB_VERSION.tgz..."
      if ! curl -sSLO https://github.com/github/hub/releases/download/v$HUB_VERSION/hub-linux-amd64-$HUB_VERSION.tgz; then
        error "Could not download hub..."
        return 1
      fi

      info "Installing hub..."
      if ! tar -zxf hub-linux-amd64-$HUB_VERSION.tgz --strip 2 hub-linux-amd64-$HUB_VERSION/bin/hub; then
        error "Could not install hub..."
        return 1
      fi
      chmod +x hub
      mv hub /usr/local/bin/hub
    fi

    if ! hub version; then
      return 1
    fi
  fi
}

install_helm() {
  if ! which helm >/dev/null ; then
    log "Downloading helm-v${HELM_VERSION}-linux-amd64.tar.gz..."
    if ! curl -sSLO https://storage.googleapis.com/kubernetes-helm/helm-v${HELM_VERSION}-linux-amd64.tar.gz; then
      log "Could not download helm..."
      return 1
    fi

    log "Installing helm..."
    if ! tar -zxf helm-v${HELM_VERSION}-linux-amd64.tar.gz --strip 1 linux-amd64/helm; then
      log "Could not install helm..."
      return 1
    fi
    chmod +x helm
    mv helm /usr/local/bin/helm

    if ! helm version --client; then
      return 1
    fi

    if ! helm init --client-only >/dev/null; then
      return 1
    fi
  fi
}

docker_login() {
  local username=$DOCKER_USER
  local password=$DOCKER_PASS
  local email=$DOCKER_EMAIL
  local registry=${1}
  case "$1" in
    quay.io )
      username=$QUAY_USER
      password=$QUAY_PASS
      email=$QUAY_EMAIL
      ;;
  esac
  info "Authenticating with ${registry:-docker.io}..."

  if [[ $(vercmp 17.06.0 ${DOCKER_CLIENT_VERSION%%-*}) -lt 0 ]]; then
    DOCKER_LOGIN_ARGS="${email:+-e $email}"
  fi

  DOCKER_LOGIN_ARGS+=" -u $username -p $password"
  docker login $DOCKER_LOGIN_ARGS $registry
}

## docker cache load should probably be performed in the circle.yml build steps,
## but we noticed that the cache was not being loaded properly when done this way.
## As a workaround, the cache load/save is being performed from the script itself.
docker_load_cache() {
  if [[ $(vercmp 1.13 ${DOCKER_SERVER_VERSION%%-*}) -ge 0 ]] && [[ -f /cache/layers.tar ]]; then
    log "Loading docker image layer cache..."
    docker load -i /cache/layers.tar
  fi
}

docker_save_cache() {
  if [[ $(vercmp 1.13 ${DOCKER_SERVER_VERSION%%-*}) -ge 0 ]]; then
    log "Saving docker image layer cache..."
    mkdir -p /cache
    docker save -o /cache/layers.tar $1
  fi
}

docker_build() {
  local IMAGE_BUILD_TAG=${1}
  local IMAGE_BUILD_DIR=${2:-.}
  local IMAGE_BUILD_CACHE=${3:-$1}

  if [[ ! -f $IMAGE_BUILD_DIR/$DOCKERFILE ]]; then
    error "$IMAGE_BUILD_DIR/$DOCKERFILE does not exist, please inspect the release configuration in circle.yml"
    return 1
  fi

  if [[ $(vercmp 1.13 ${DOCKER_SERVER_VERSION%%-*}) -ge 0 ]]; then
    DOCKER_BUILD_CACHE_FROM_ARGS="--cache-from $IMAGE_BUILD_CACHE"
  fi

  info "Building '$IMAGE_BUILD_TAG' from '$IMAGE_BUILD_DIR/'..."
  docker build $DOCKER_BUILD_CACHE_FROM_ARGS --rm=false -f $IMAGE_BUILD_DIR/$DOCKERFILE -t $IMAGE_BUILD_TAG $IMAGE_BUILD_DIR/ || return 1

  for VARIANT in $SUPPORTED_VARIANTS
  do
    if [[ -f $IMAGE_BUILD_DIR/$VARIANT/Dockerfile ]]; then
      if [[ $(vercmp 1.13 ${DOCKER_SERVER_VERSION%%-*}) -ge 0 ]]; then
        DOCKER_BUILD_CACHE_FROM_ARGS="--cache-from $IMAGE_BUILD_CACHE-$VARIANT"
      fi

      info "Building '$IMAGE_BUILD_TAG-$VARIANT' from '$IMAGE_BUILD_DIR/$VARIANT/'..."
      if grep -q "^FROM " $IMAGE_BUILD_DIR/$VARIANT/Dockerfile; then\
        docker build $DOCKER_BUILD_CACHE_FROM_ARGS --rm=false -t $IMAGE_BUILD_TAG-$VARIANT $IMAGE_BUILD_DIR/$VARIANT/ || return 1
      else
        echo -e "FROM $IMAGE_BUILD_TAG\n$(cat $IMAGE_BUILD_DIR/$VARIANT/Dockerfile)" | docker build $DOCKER_BUILD_CACHE_FROM_ARGS -t $IMAGE_BUILD_TAG-$VARIANT - || return 1
      fi
    fi
  done
}

docker_pull() {
  local IMAGE_BUILD_TAG=${1}

  info "Pulling '$IMAGE_BUILD_TAG'..."
  docker pull $IMAGE_BUILD_TAG

  for VARIANT in $SUPPORTED_VARIANTS
  do
    if [[ -f $RS/$VARIANT/Dockerfile ]]; then
      info "Pulling '$IMAGE_BUILD_TAG-$VARIANT'..."
      docker pull $IMAGE_BUILD_TAG-$VARIANT
    fi
  done
}

docker_push() {
  local IMAGE_BUILD_TAG=${1}
  local IMAGE_BUILD_DIR=${2:-.}

  info "Pushing '$IMAGE_BUILD_TAG'..."
  docker push $IMAGE_BUILD_TAG

  for VARIANT in $SUPPORTED_VARIANTS
  do
    if [[ -f $IMAGE_BUILD_DIR/$VARIANT/Dockerfile ]]; then
      info "Pushing '$IMAGE_BUILD_TAG-$VARIANT'..."
      docker push $IMAGE_BUILD_TAG-$VARIANT
    fi
  done
}

docker_build_and_push() {
  if ! docker_build ${1} ${2} ${3}; then
    return 1
  fi
  docker_push ${1} ${2}
}

gcloud_docker_push() {
  local IMAGE_BUILD_TAG=${1}
  local IMAGE_BUILD_DIR=${2:-.}

  info "Pushing '$IMAGE_BUILD_TAG'..."
  gcloud docker -- push $IMAGE_BUILD_TAG

  for VARIANT in $SUPPORTED_VARIANTS
  do
    if [[ -f $IMAGE_BUILD_DIR/$VARIANT/Dockerfile ]]; then
      info "Pushing '$IMAGE_BUILD_TAG-$VARIANT'..."
      gcloud docker -- push $IMAGE_BUILD_TAG-$VARIANT
    fi
  done
}

gcloud_login() {
  install_google_cloud_sdk || return 1

  info "Authenticating with Google Cloud..."
  echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/gcloud-service-key.json
  gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
}

docker_build_and_gcloud_push() {
  if ! docker_build ${1} ${2} ${3}; then
    return 1
  fi
  gcloud_docker_push ${1} ${2}
}

git_configure() {
  git config --global user.name "$GIT_AUTHOR_NAME"
  git config --global user.email "$GIT_AUTHOR_EMAIL"

  if [[ -n $GITHUB_USER && -n $GITHUB_PASSWORD ]]; then
    git config --global credential.helper store
    echo "https://$GITHUB_USER:$GITHUB_PASSWORD@github.com" > ~/.git-credentials
  fi
}

git_create_branch() {
  git fetch development 2>/dev/null || return 1
  if ! git checkout $1-$2 2>/dev/null; then
    info "Creating branch for new pull-request..."
    git checkout -b $1-$2
  else
    info "Amending updates to existing branch..."
    BRANCH_AMEND_COMMITS=1
  fi
  return 0
}

dockerhub_update_description() {
  if [[ -f README.md ]]; then
    if ! curl -sSf "https://hub.docker.com/v2/users/login/" \
      -H "Content-Type: application/json" \
      --data '{"username": "'${DOCKER_USER}'", "password": "'${DOCKER_PASS}'"}' -o /tmp/token.json; then
      return 1
    fi
    DOCKER_TOKEN=$(grep token /tmp/token.json | cut -d':' -f2 | cut -d'"' -f2)

    info "Updating image description on Docker Hub..."
    echo "{\"full_description\": \"$(sed 's/\\/\\\\/g' README.md | sed 's/"/\\"/g' | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g')\"}" > /tmp/description.json
    if ! curl -sSf "https://hub.docker.com/v2/repositories/$DOCKER_PROJECT/$IMAGE_NAME/" -o /dev/null \
      -H "Content-Type: application/json" \
      -H "Authorization: JWT ${DOCKER_TOKEN}" \
      -X PATCH --data @/tmp/description.json; then
      return 1
    fi
  fi
}

chart_update_image() {
  local CHART_NEW_IMAGE_VERSION=${2#*:}
  local CHART_CURRENT_IMAGE_VERSION=$(grep "^[ ]*image:[ ]*${2%:*}" ${1}/values.yaml)
  local CHART_CURRENT_IMAGE_VERSION=${CHART_CURRENT_IMAGE_VERSION##*:}
  case $(vercmp $CHART_CURRENT_IMAGE_VERSION $CHART_NEW_IMAGE_VERSION) in
    "0" )
      warn "Chart image \`${2}\` has not been updated."
      return 1
      ;;
    "-1" )
      info "Chart image \`${2%:*}:${CHART_CURRENT_IMAGE_VERSION}\` is newer than ${2}"
      return 1
      ;;
    "1" )
      info "Updating chart image to '${2}'..."
      sed -i 's|image: '"${2%:*}"':.*|image: '"${2}"'|' ${1}/values.yaml
      git add ${1}/values.yaml
      git commit -m "$CHART_NAME: update to \`${2}\`" >/dev/null
      ;;
  esac
}

chart_update_appVersion() {
  if [[ $SKIP_CHART_APP_VERSION_UPDATE -eq 0 ]]; then
    local CHART_IMAGE_VERSION=${2#*:}
    local CHART_CURRENT_APP_VERSION=$(grep ^appVersion ${1}/Chart.yaml | awk '{print $2}')
    local CHART_NEW_APP_VERSION=${CHART_IMAGE_VERSION%%-*}

    # adds appVersion field if its not present
    if ! grep -q ^appVersion ${1}/Chart.yaml; then
      sed -i '/^version/a appVersion: ' ${1}/Chart.yaml
    fi

    if [[ $(vercmp $CHART_CURRENT_APP_VERSION $CHART_NEW_APP_VERSION) -ne 0 ]]; then
      info "Updating chart appVersion to '$CHART_NEW_APP_VERSION'..."
      sed -i 's|^appVersion:.*|appVersion: '"${CHART_NEW_APP_VERSION}"'|g' ${1}/Chart.yaml
      git add ${1}/Chart.yaml
      git commit -m "$CHART_NAME: bump chart appVersion to \`$CHART_NEW_APP_VERSION\`" >/dev/null
    fi
  fi
}

chart_update_requirements() {
  if [[ -f ${1}/requirements.lock ]]; then
    install_helm || exit 1

    rm -rf ${1}/requirements.lock
    helm dependency update ${1} >/dev/null

    if git diff | grep -q '^+[ ]*version:' ; then
      info "Updating chart requirements.lock..."
      git add ${1}/requirements.lock
      git commit -m "$CHART_NAME: updated chart requirements" >/dev/null
    else
      git checkout ${1}/requirements.lock
    fi
  fi
}

chart_update_version() {
  if [[ -z $BRANCH_AMEND_COMMITS ]]; then
    info "Updating chart version to '$2'..."
    sed -i 's|^version:.*|version: '"${2}"'|g' ${1}/Chart.yaml
    git add ${1}/Chart.yaml
    git commit -m "$CHART_NAME: bump chart version to \`$CHART_VERSION_NEXT\`" >/dev/null
  fi
}

get_image_build_dir() {
    local RELEASE_BRANCH=${1}
    local BASE_IMAGE=${2}

    if [[ -f $RELEASE_BRANCH/$BASE_IMAGE/$DOCKERFILE ]]; then
        IMAGE_BUILD_DIR=$RELEASE_BRANCH/$BASE_IMAGE
    elif [[ -f $RELEASE_BRANCH/$DOCKERFILE ]]; then
        IMAGE_BUILD_DIR=$RELEASE_BRANCH
    else
        error "Dockerfile not found. Check the Dockerfile is present either in the release_series folder or the base_image folder"
	exit 1
    fi
    echo $IMAGE_BUILD_DIR
}

get_image_build_tag() {
    local BASE_TAG=${1}
    local BASE_IMAGE=${2}

    [[ $BASE_IMAGE != "debian" ]] && IMAGE_BUILD_TAG=$BASE_TAG-$BASE_IMAGE || IMAGE_BUILD_TAG=$BASE_TAG

    echo $IMAGE_BUILD_TAG
}

get_image_build_cache() {
    local DOCKER_PROJECT=${1}
    local IMAGE_NAME=${2}
    local BASE_TAG=${3}
    local BASE_IMAGE=${4}

    [[ $BASE_IMAGE != "debian" ]] && IMAGE_BUILD_CACHE=$DOCKER_PROJECT/$IMAGE_NAME:$BASE_TAG-$BASE_IMAGE || IMAGE_BUILD_CACHE=$DOCKER_PROJECT/$IMAGE_NAME:$BASE_TAG

    echo $IMAGE_BUILD_CACHE
}
